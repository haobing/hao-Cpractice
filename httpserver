#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <fcntl.h>
#include <dirent.h>
#include <sys/stat.h>
#include <sys/shm.h>
#include <pthread.h>
#define BUFFER_SIZE 1024

typedef struct req{
	char *method;
	char *file;
	char *host;
	char *accept;
	char *accept_Language;
	char *accept_Encoding;
	char *connection;
	char *user_Agent;
}Request;

Request parseRequest(char *buffer);

int conutChar(char *str,char c);
int indexOfStrFirst(char *str,char c);
char *getFileType(const char *file);
int getFileSize(char *filename);

int countChar(char *str,char c)
{
	int count=0;
	for(*str;*str!='\0';str++){
		if(*str==c)
			count++;
		}
		return count;
}

int indexOfStrFirst(char *str,char c)
{
	int i=0;
	for(i=0;i<strlen(str);i++){
		if(str[i]==c)
			return i;
		}
	return -1;
}

char *getFileType(const char *filename)
{
	char sExt[32];
	const char *p_start=filename;
	memset(sExt,0,sizeof(sExt));
	while(*p_start){
		if(*p_start=='.'){
			p_start++;
			strcpy(sExt,p_start);
			break;
		}
		p_start++;
	}
	
	if(strncmp(sExt,"bmp",3)==0)
		return "image/bmp";
	if(strncmp(sExt,"gif",3)==0)
		return "image/gif";
	if(strncmp(sExt,"ico",3)==0)
		return "image/ico";
	if(strncmp(sExt,"jpg",3)==0)
		return "image/jpg";
	if (strncmp(sExt, "avi", 3) == 0)
        return "video/avi";

    if (strncmp(sExt, "css", 3) == 0)
        return "text/css";

    if (strncmp(sExt, "dll", 3) == 0)
        return "application/x-msdownload";

    if (strncmp(sExt, "exe", 3) == 0)
        return "application/x-msdownload";

    if (strncmp(sExt, "dtd", 3) == 0)
        return "text/xml";

    if (strncmp(sExt, "mp3", 3) == 0)
        return "audio/mp3";

    if (strncmp(sExt, "mpg", 3) == 0)
        return "video/mpg";

    if (strncmp(sExt, "png", 3) == 0)
        return "image/png";

    if (strncmp(sExt, "ppt", 3) == 0)
        return "application/vnd.ms-powerpoint";

    if (strncmp(sExt, "xls", 3) == 0)
        return "application/vnd.ms-excel";

    if (strncmp(sExt, "doc", 3) == 0)
        return "application/msword";

    if (strncmp(sExt, "mp4", 3) == 0)
        return "video/mpeg4";

    if (strncmp(sExt, "ppt", 3) == 0)
        return "application/x-ppt";

    if (strncmp(sExt, "wma", 3) == 0)
        return "audio/x-ms-wma";

    if (strncmp(sExt, "wmv", 3) == 0)
        return "video/x-ms-wmv";
     return "text/html";
}

int getFileSize(char *filename)
{
	int fileSize=0;
	FILE *fp=NULL;
	if(filename==NULL)
		return 0;
	fp=fopen(filename,"rb");
	if(fp==NULL)
		return 0;
	fseek(fp,0,SEEK_END);
	fileSize=ftell(fp);
	rewind(fp);
	fclose(fp);
	return fileSize;
}
Request ParseRequest(char *buffer)
{
	Request req;
	char *head=NULL,**line=NULL,*temp=NULL;
	
	int i=0,line_count=0,head_count=0,index=0;
	req.accept=NULL;
	req.accept_Encoding=NULL;
	req.accept_Language=NULL;
	req.connection=NULL;
	req.host=NULL;
	req.method=NULL;
	req.file=NULL;
	req.user_Agent=NULL;
	line_count=countChar(buffer,'\n');
	line=(char **)malloc(line_count*sizeof(char *));
	for(i=0;i<line_count;i++)
	line[i]=NULL;
	temp=strtok(buffer,"\n");
	i=0;
	while(temp){
		line[i]=(char*)malloc((strlen(temp)+1)*sizeof(char));
		strcpy(line[i++],temp);
		temp=strtok(NULL,"\n");
	}
	for(i=0;i<line_count&&line[i]!=NULL;i++){
		head=strtok(line[i]," ");
		if(strcmp(head,"GET")==0){
			temp=strtok(NULL," ");
			index=indexOfStrFirst(temp,'?');
			if(index!=-1)
				temp[index]='\0';
			req.file=(char *)malloc((strlen("/var/www/html")+strlen(temp)+1));
			printf("length:%zu\n",(strlen(temp)+1));
			sprintf(req.file,"/var/www/html%s",temp);
		}else if(strcmp(head,"POST")==0){
			temp=strtok(NULL," ");
			index=indexOfStrFirst(temp,'?');
			if(index!=-1)
				temp[i]='\0';
			req.file=(char *)malloc((strlen(temp)+1));
			strcpy(req.file,temp);
			sprintf(req.file,"/var/www/html%s",temp);
		}else if(strcmp(head,"Host:")==0){
			temp=strtok(NULL," ");
			printf("FN:%s\n",req.file);
			printf("LN:%zu\n",strlen(req.file));
			req.host=(char *)malloc(strlen(temp)+1);
			strcpy(req.host,temp);
			printf("the Host:%s\n",req.host);
		}else if(strcmp(head,"User-Agent:")==0){
			temp=strtok(NULL," ");
			req.user_Agent=(char *)malloc(strlen(temp)+1);
			strcpy(req.user_Agent,temp);
			printf("the user_Agent:%s\n",req.user_Agent);
		}else if(strcmp(head,"Accept:")==0){
			temp=strtok(NULL," ");
			req.accept=(char *)malloc(strlen(temp)+1);
			strcpy(req.accept,temp);
			printf("the accept=%s\n",req.accept);
		}else if(strcmp(head,"Accept-Language:")==0){
			temp=strtok(NULL," ");
			req.accept_Language=(char *)malloc(strlen(temp)+1);
			strcpy(req.accept_Language,temp);
			printf("Accept_Language=%s\n",req.accept_Language);
		}else if(strcmp(head,"Accept-Encoding:")==0){
			temp=strtok(NULL," ");
			req.accept_Encoding=(char *)malloc(strlen(temp)+1);
			strcpy(req.accept_Encoding,temp);
			printf("Accept-Encoding:%s\n",req.accept_Encoding);
		}else if(strcmp(head,"Connection:")==0){
			temp=strtok(NULL," ");
			req.connection=(char *)malloc(strlen(temp)+1);
			strcpy(req.connection,temp);
			printf("Connection:%s\n",req.connection);
		}
	}
	return req;
}

void *handle(void *arg)
{
	
	int con=*((int *)arg);
	printf("----------test con=%d\n",con);
	int i,j,len=0;
	char buffer[BUFFER_SIZE];
	char *buf=NULL;
	char temp[1024];
	int fp=-1;
	int count=0;
	int flag=0;
	while(1){
		memset(buffer,0,sizeof(buffer));
		len=recv(con,buffer,sizeof(buffer),0);
		if(buf==NULL){
			buf=(char *)malloc(BUFFER_SIZE);
		}else{
			buf=(char *)realloc(buf,(i+1)*BUFFER_SIZE);
		}
		for(j=0;j<BUFFER_SIZE;j++){
			buf[i*BUFFER_SIZE+j]=buffer[j];
			if(buffer[j]==13&&buffer[j+1]==10&&buffer[j+2]==13&&buffer[j+3]==10&&j<BUFFER_SIZE-4){
				flag=1;
			}
		}
		if(flag)
			break;
	}
	printf("%s\n\n",buf);
	Request res=ParseRequest(buf);
	free(buf);
	len=strlen("HTTP/1.1 200 OK\r\nConnection: close\r\nAccept-Ranges: bytes\r\n")+1;
	buf=(char *)malloc(sizeof(char )*len);
	strcpy(buf,"HTTP/1.1 200 OK\r\nConnection: close\r\nAccept-Ranges: bytes\r\n");
	sprintf(temp,"Content-Type: %s\r\n",getFileType(res.file));
	len+=strlen(temp);
	buf=(char *)realloc(buf,sizeof(char)*len);
	strcat(buf,temp);
	printf("filename :%s\n",res.file);
	printf("Content-Length:%d\n",getFileSize(res.file));
	sprintf(temp,"Content-Length:%d\r\n\r\n",getFileSize(res.file));
	len+=strlen(temp);
	printf("-------2\n");
	buf=(char *)realloc(buf,sizeof(char)*len);
	strcat(buf,temp);
	fp=open(res.file,O_RDONLY);
	while(1){
		i=read(fp,temp,sizeof(temp));
		if(i<0)
			break;
		buf=(char *)realloc(buf,sizeof(char)*(len+i));
		memcpy(&buf[len],temp,i);
		len+=i;
	}
	close(fp);
	printf("---------3\n");
	buf=(char *)realloc(buf,sizeof(char)*(len+4));
	memcpy(&buf[len],"\r\n",2);
	send(con,buf,(len+2),0);
	printf("finish\n");
	close(con);
}
int main()
{
	struct sockaddr_in client_addr;
	socklen_t length=sizeof(client_addr);
	pthread_t *threa=NULL;
	int conn,*temp=NULL,err=0;
	int httpServer=socket(AF_INET,SOCK_STREAM,0);
	int opt=1;
	setsockopt(httpServer,SOL_SOCKET,SO_REUSEADDR,&opt,sizeof(int));
	
	struct sockaddr_in server_sockaddr;
	server_sockaddr.sin_family = AF_INET;
    server_sockaddr.sin_port = htons(8888);
    server_sockaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    if(bind(httpServer,(struct sockaddr *)&server_sockaddr,sizeof(server_sockaddr))==-1){
        printf("绑定失败!\n");
        return 0;   
    }
		if(listen(httpServer,10) == -1){
        printf("监听失败!\n");
        return 0;   
    }
    while(1){
    	conn=accept(httpServer,(struct sockaddr*)&client_addr,&length);
    	if(conn==-1){
    		printf("kehujilianjiechucuo-------\n");
    		return 0;
    	}
    	temp=(int *)malloc(sizeof(int));
    	*temp=conn;
    	threa=(pthread_t*)malloc(sizeof(pthread_t));
    	err=pthread_create(threa,NULL,handle,(void *)temp);
    	if(err!=0){
    		printf("create thread faild\n");
    	}
    }
  }

		
				


	
